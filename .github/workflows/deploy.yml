name: Deploy to Dokploy

on:
  push:
    branches: [ main ]
    paths:
      - '*.yaml'
      - '*.yml'
      - 'compose/*.yml'
      - 'HomeAssistant/**'
      - 'Duplicacy/**'
      - 'Traefik/**'
      - 'update-monitor/**'

  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - jellyfin
        - immich
        - vaultwarden
        - sonarr
        - sabnzbd
        - prowlarr
        - jellyseerr
        - radarr
        - cloudflared
        - duplicacy
        - diun
        - homeassistant
        - netdata

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Compose Files

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Make validation script executable
      run: chmod +x scripts/validate-compose.sh

    - name: Validate compose files
      run: ./scripts/validate-compose.sh
    
    - name: Upload validation logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-logs
        path: logs/validation.log
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Deploy services
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual deployment
          case "${{ github.event.inputs.service }}" in
            "jellyfin") curl -X POST "${{ secrets.JELLYFIN_WEBHOOK }}" ;;
            "immich") curl -X POST "${{ secrets.IMMICH_WEBHOOK }}" ;;
            "vaultwarden") curl -X POST "${{ secrets.VAULTWARDEN_WEBHOOK }}" ;;
            "sonarr") curl -X POST "${{ secrets.SONARR_WEBHOOK }}" ;;
            "sabnzbd") curl -X POST "${{ secrets.SABNZBD_WEBHOOK }}" ;;
            "prowlarr") curl -X POST "${{ secrets.PROWLARR_WEBHOOK }}" ;;
            "jellyseerr") curl -X POST "${{ secrets.JELLYSEERR_WEBHOOK }}" ;;
            "radarr") curl -X POST "${{ secrets.RADARR_WEBHOOK }}" ;;
            "cloudflared") curl -X POST "${{ secrets.CLOUDFLARED_WEBHOOK }}" ;;
            "duplicacy") curl -X POST "${{ secrets.DUPLICACY_WEBHOOK }}" ;;
            "diun") curl -X POST "${{ secrets.DIUN_WEBHOOK }}" ;;
            "homeassistant") curl -X POST "${{ secrets.HOMEASSISTANT_WEBHOOK }}" ;;
            "netdata") curl -X POST "${{ secrets.NETDATA_WEBHOOK }}" ;;
            "all")
              curl -X POST "${{ secrets.JELLYFIN_WEBHOOK }}"
              curl -X POST "${{ secrets.IMMICH_WEBHOOK }}"
              curl -X POST "${{ secrets.VAULTWARDEN_WEBHOOK }}"
              curl -X POST "${{ secrets.SONARR_WEBHOOK }}"
              curl -X POST "${{ secrets.SABNZBD_WEBHOOK }}"
              curl -X POST "${{ secrets.PROWLARR_WEBHOOK }}"
              curl -X POST "${{ secrets.JELLYSEERR_WEBHOOK }}"
              curl -X POST "${{ secrets.RADARR_WEBHOOK }}"
              curl -X POST "${{ secrets.CLOUDFLARED_WEBHOOK }}"
              curl -X POST "${{ secrets.DUPLICACY_WEBHOOK }}"
              curl -X POST "${{ secrets.DIUN_WEBHOOK }}"
              curl -X POST "${{ secrets.HOMEASSISTANT_WEBHOOK }}"
              curl -X POST "${{ secrets.NETDATA_WEBHOOK }}"
              ;;
          esac
        else
          # Auto-deploy based on changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "Jellyfin.yaml"; then
            echo "Deploying Jellyfin..."
            curl -X POST "${{ secrets.JELLYFIN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Immich.yml"; then
            echo "Deploying Immich..."
            curl -X POST "${{ secrets.IMMICH_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Vaultwarden.yaml"; then
            echo "Deploying Vaultwarden..."
            curl -X POST "${{ secrets.VAULTWARDEN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Sonarr.yaml"; then
            echo "Deploying Sonarr..."
            curl -X POST "${{ secrets.SONARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "sabnzbd.yaml"; then
            echo "Deploying SABnzbd..."
            curl -X POST "${{ secrets.SABNZBD_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Prowlarr.yaml"; then
            echo "Deploying Prowlarr..."
            curl -X POST "${{ secrets.PROWLARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Jellyseerr.yaml"; then
            echo "Deploying Jellyseerr..."
            curl -X POST "${{ secrets.JELLYSEERR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Radarr.yaml"; then
            echo "Deploying Radarr..."
            curl -X POST "${{ secrets.RADARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Cloudflared.yaml"; then
            echo "Deploying Cloudflared..."
            curl -X POST "${{ secrets.CLOUDFLARED_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Duplicacy/"; then
            echo "Deploying Duplicacy..."
            curl -X POST "${{ secrets.DUPLICACY_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "update-monitor/"; then
            echo "Deploying DIUN..."
            curl -X POST "${{ secrets.DIUN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "HomeAssistant/"; then
            echo "Deploying Home Assistant..."
            curl -X POST "${{ secrets.HOMEASSISTANT_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "compose/netdata.yml"; then
            echo "Deploying Netdata..."
            curl -X POST "${{ secrets.NETDATA_WEBHOOK }}"
          fi
        fi
    
    - name: Deployment Summary
      if: always()
      run: |
        echo "Deployment completed successfully"
        echo "Check Dokploy dashboard for service status"
