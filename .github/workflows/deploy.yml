name: Deploy to Dokploy

on:
  push:
    branches: [ main ]
    paths:
      - '*.yaml'
      - '*.yml'
      - 'compose/*.yml'
      - 'HomeAssistant/**'
      - 'Duplicacy/**'
      - 'Traefik/**'
      - 'update-monitor/**'

  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - jellyfin
        - immich
        - vaultwarden
        - sonarr
        - sabnzbd
        - prowlarr
        - jellyseerr
        - radarr
        - cloudflared
        - duplicacy
        - diun
        - homeassistant
        - netdata

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Compose Files

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        # Docker Compose v2 is already available as 'docker compose'
        docker compose version

    - name: Make validation script executable
      run: chmod +x scripts/validate-simple.sh

    - name: Validate compose files
      run: ./scripts/validate-simple.sh
    
    - name: Upload validation logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-logs
        path: logs/validation.log
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    name: Deploy to Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Deploy services
      run: |
        echo "Current branch: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo "Ref: ${{ github.ref }}"

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual deployment
          echo "Manual deployment of ${{ github.event.inputs.service }}"
          case "${{ github.event.inputs.service }}" in
            "jellyfin")
              echo "Deploying Jellyfin..."
              echo "Trying different branch formats..."

              echo "Attempt 1: Standard GitHub webhook format"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"},"head_commit":{"id":"'${{ github.sha }}'"},"pusher":{"name":"github-actions"}}' "${{ secrets.JELLYFIN_WEBHOOK }}"

              echo "Attempt 2: Simple branch name"
              curl -X POST -H "Content-Type: application/json" -d '{"branch":"main"}' "${{ secrets.JELLYFIN_WEBHOOK }}"

              echo "Attempt 3: Empty payload (original)"
              curl -X POST "${{ secrets.JELLYFIN_WEBHOOK }}"
              ;;
            "immich")
              echo "Deploying Immich..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.IMMICH_WEBHOOK }}"
              ;;
            "vaultwarden")
              echo "Deploying Vaultwarden..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.VAULTWARDEN_WEBHOOK }}"
              ;;
            "sonarr")
              echo "Deploying Sonarr..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SONARR_WEBHOOK }}"
              ;;
            "sabnzbd")
              echo "Deploying SABnzbd..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SABNZBD_WEBHOOK }}"
              ;;
            "prowlarr")
              echo "Deploying Prowlarr..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.PROWLARR_WEBHOOK }}"
              ;;
            "jellyseerr")
              echo "Deploying Jellyseerr..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.JELLYSEERR_WEBHOOK }}"
              ;;
            "radarr")
              echo "Deploying Radarr..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.RADARR_WEBHOOK }}"
              ;;
            "cloudflared")
              echo "Deploying Cloudflared..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.CLOUDFLARED_WEBHOOK }}"
              ;;
            "duplicacy")
              echo "Deploying Duplicacy..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DUPLICACY_WEBHOOK }}"
              ;;
            "diun")
              echo "Deploying DIUN..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DIUN_WEBHOOK }}"
              ;;
            "homeassistant")
              echo "Deploying Home Assistant..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.HOMEASSISTANT_WEBHOOK }}"
              ;;
            "netdata")
              echo "Deploying Netdata..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.NETDATA_WEBHOOK }}"
              ;;
            "all")
              echo "Deploying all services..."
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.JELLYFIN_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.IMMICH_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.VAULTWARDEN_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SONARR_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SABNZBD_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.PROWLARR_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.JELLYSEERR_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.RADARR_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.CLOUDFLARED_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DUPLICACY_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DIUN_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.HOMEASSISTANT_WEBHOOK }}"
              curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.NETDATA_WEBHOOK }}"
              ;;
          esac
        else
          # Auto-deploy based on changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "Jellyfin.yaml"; then
            echo "Deploying Jellyfin..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.JELLYFIN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Immich.yml"; then
            echo "Deploying Immich..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.IMMICH_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Vaultwarden.yaml"; then
            echo "Deploying Vaultwarden..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.VAULTWARDEN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Sonarr.yaml"; then
            echo "Deploying Sonarr..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SONARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "sabnzbd.yaml"; then
            echo "Deploying SABnzbd..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.SABNZBD_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Prowlarr.yaml"; then
            echo "Deploying Prowlarr..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.PROWLARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Jellyseerr.yaml"; then
            echo "Deploying Jellyseerr..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.JELLYSEERR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Radarr.yaml"; then
            echo "Deploying Radarr..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.RADARR_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Cloudflared.yaml"; then
            echo "Deploying Cloudflared..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.CLOUDFLARED_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "Duplicacy/"; then
            echo "Deploying Duplicacy..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DUPLICACY_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "update-monitor/"; then
            echo "Deploying DIUN..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.DIUN_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "HomeAssistant/"; then
            echo "Deploying Home Assistant..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.HOMEASSISTANT_WEBHOOK }}"
          fi

          if echo "$CHANGED_FILES" | grep -q "compose/netdata.yml"; then
            echo "Deploying Netdata..."
            curl -X POST -H "Content-Type: application/json" -d '{"ref":"refs/heads/main","repository":{"default_branch":"main"}}' "${{ secrets.NETDATA_WEBHOOK }}"
          fi
        fi
    
    - name: Deployment Summary
      if: always()
      run: |
        echo "Deployment completed successfully"
        echo "Check Dokploy dashboard for service status"
